// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"
	helpers "worker-service/internal/pkg/helpers"

	mock "github.com/stretchr/testify/mock"

	request "worker-service/internal/modules/worker/models/request"
)

// MongodbRepositoryQuery is an autogenerated mock type for the MongodbRepositoryQuery type
type MongodbRepositoryQuery struct {
	mock.Mock
}

// FindAllExpireBankTicket provides a mock function with given fields: ctx
func (_m *MongodbRepositoryQuery) FindAllExpireBankTicket(ctx context.Context) <-chan helpers.Result {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllExpireBankTicket")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context) <-chan helpers.Result); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// FindAllExpirePayment provides a mock function with given fields: ctx
func (_m *MongodbRepositoryQuery) FindAllExpirePayment(ctx context.Context) <-chan helpers.Result {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllExpirePayment")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context) <-chan helpers.Result); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// FindBankTicketByTicketNumber provides a mock function with given fields: ctx, ticketNumber
func (_m *MongodbRepositoryQuery) FindBankTicketByTicketNumber(ctx context.Context, ticketNumber string) <-chan helpers.Result {
	ret := _m.Called(ctx, ticketNumber)

	if len(ret) == 0 {
		panic("no return value specified for FindBankTicketByTicketNumber")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan helpers.Result); ok {
		r0 = rf(ctx, ticketNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// FindOneLastTicket provides a mock function with given fields: ctx, countryCode, ticketType, eventId, collectionName
func (_m *MongodbRepositoryQuery) FindOneLastTicket(ctx context.Context, countryCode string, ticketType string, eventId string, collectionName string) <-chan helpers.Result {
	ret := _m.Called(ctx, countryCode, ticketType, eventId, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for FindOneLastTicket")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) <-chan helpers.Result); ok {
		r0 = rf(ctx, countryCode, ticketType, eventId, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// FindOneTicketDetail provides a mock function with given fields: ctx, payload
func (_m *MongodbRepositoryQuery) FindOneTicketDetail(ctx context.Context, payload request.CreateTicketReq) <-chan helpers.Result {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for FindOneTicketDetail")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateTicketReq) <-chan helpers.Result); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// FindOneTicketDetailById provides a mock function with given fields: ctx, id
func (_m *MongodbRepositoryQuery) FindOneTicketDetailById(ctx context.Context, id string) <-chan helpers.Result {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindOneTicketDetailById")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan helpers.Result); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// FindOneTicketDetailByTag provides a mock function with given fields: ctx, payload
func (_m *MongodbRepositoryQuery) FindOneTicketDetailByTag(ctx context.Context, payload request.TicketDetailByTagReq) <-chan helpers.Result {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for FindOneTicketDetailByTag")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, request.TicketDetailByTagReq) <-chan helpers.Result); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// FindOnlineTicketConfigByTag provides a mock function with given fields: ctx, tag
func (_m *MongodbRepositoryQuery) FindOnlineTicketConfigByTag(ctx context.Context, tag string) <-chan helpers.Result {
	ret := _m.Called(ctx, tag)

	if len(ret) == 0 {
		panic("no return value specified for FindOnlineTicketConfigByTag")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan helpers.Result); ok {
		r0 = rf(ctx, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// FindPaymentByTicketNumber provides a mock function with given fields: ctx, ticketNumber
func (_m *MongodbRepositoryQuery) FindPaymentByTicketNumber(ctx context.Context, ticketNumber string) <-chan helpers.Result {
	ret := _m.Called(ctx, ticketNumber)

	if len(ret) == 0 {
		panic("no return value specified for FindPaymentByTicketNumber")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan helpers.Result); ok {
		r0 = rf(ctx, ticketNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// FindTotalAvalailableTicket provides a mock function with given fields: ctx, tag
func (_m *MongodbRepositoryQuery) FindTotalAvalailableTicket(ctx context.Context, tag string) <-chan helpers.Result {
	ret := _m.Called(ctx, tag)

	if len(ret) == 0 {
		panic("no return value specified for FindTotalAvalailableTicket")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan helpers.Result); ok {
		r0 = rf(ctx, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// NewMongodbRepositoryQuery creates a new instance of MongodbRepositoryQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMongodbRepositoryQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MongodbRepositoryQuery {
	mock := &MongodbRepositoryQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
