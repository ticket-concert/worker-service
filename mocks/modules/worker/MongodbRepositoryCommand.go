// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "worker-service/internal/modules/worker/models/entity"
	helpers "worker-service/internal/pkg/helpers"

	mock "github.com/stretchr/testify/mock"

	request "worker-service/internal/modules/worker/models/request"
)

// MongodbRepositoryCommand is an autogenerated mock type for the MongodbRepositoryCommand type
type MongodbRepositoryCommand struct {
	mock.Mock
}

// DeleteOneOrder provides a mock function with given fields: ctx, ticketNumber
func (_m *MongodbRepositoryCommand) DeleteOneOrder(ctx context.Context, ticketNumber string) <-chan helpers.Result {
	ret := _m.Called(ctx, ticketNumber)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOneOrder")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan helpers.Result); ok {
		r0 = rf(ctx, ticketNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// InsertManyTicketCollection provides a mock function with given fields: ctx, collection, ticket
func (_m *MongodbRepositoryCommand) InsertManyTicketCollection(ctx context.Context, collection string, ticket []entity.BankTicket) <-chan helpers.Result {
	ret := _m.Called(ctx, collection, ticket)

	if len(ret) == 0 {
		panic("no return value specified for InsertManyTicketCollection")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, []entity.BankTicket) <-chan helpers.Result); ok {
		r0 = rf(ctx, collection, ticket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// UpdateOneBankTicket provides a mock function with given fields: ctx, payload
func (_m *MongodbRepositoryCommand) UpdateOneBankTicket(ctx context.Context, payload request.UpdateBankTicketRequest) <-chan helpers.Result {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOneBankTicket")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateBankTicketRequest) <-chan helpers.Result); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// UpdateOnePayment provides a mock function with given fields: ctx, paymentId
func (_m *MongodbRepositoryCommand) UpdateOnePayment(ctx context.Context, paymentId string) <-chan helpers.Result {
	ret := _m.Called(ctx, paymentId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOnePayment")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan helpers.Result); ok {
		r0 = rf(ctx, paymentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// UpdateOnlineTicketConfig provides a mock function with given fields: ctx, payload
func (_m *MongodbRepositoryCommand) UpdateOnlineTicketConfig(ctx context.Context, payload request.UpdateOnlineTicketConfigReq) <-chan helpers.Result {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOnlineTicketConfig")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateOnlineTicketConfigReq) <-chan helpers.Result); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// UpdateTicketDetailById provides a mock function with given fields: ctx, payload
func (_m *MongodbRepositoryCommand) UpdateTicketDetailById(ctx context.Context, payload request.UpdateTicketDetailByIdReq) <-chan helpers.Result {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTicketDetailById")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateTicketDetailByIdReq) <-chan helpers.Result); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// UpdateTicketDetailByTag provides a mock function with given fields: ctx, payload
func (_m *MongodbRepositoryCommand) UpdateTicketDetailByTag(ctx context.Context, payload request.UpdateTicketDetailReq) <-chan helpers.Result {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTicketDetailByTag")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateTicketDetailReq) <-chan helpers.Result); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// NewMongodbRepositoryCommand creates a new instance of MongodbRepositoryCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMongodbRepositoryCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MongodbRepositoryCommand {
	mock := &MongodbRepositoryCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
