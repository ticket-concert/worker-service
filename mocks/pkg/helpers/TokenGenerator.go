// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	helpers "worker-service/internal/pkg/helpers"

	fasthttp "github.com/valyala/fasthttp"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TokenGenerator is an autogenerated mock type for the TokenGenerator type
type TokenGenerator struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: ttl, payload
func (_m *TokenGenerator) GenerateToken(ttl time.Duration, payload map[string]interface{}) (string, string, error) {
	ret := _m.Called(ttl, payload)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(time.Duration, map[string]interface{}) (string, string, error)); ok {
		return rf(ttl, payload)
	}
	if rf, ok := ret.Get(0).(func(time.Duration, map[string]interface{}) string); ok {
		r0 = rf(ttl, payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(time.Duration, map[string]interface{}) string); ok {
		r1 = rf(ttl, payload)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(time.Duration, map[string]interface{}) error); ok {
		r2 = rf(ttl, payload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenerateTokenRefresh provides a mock function with given fields: ttl, payload
func (_m *TokenGenerator) GenerateTokenRefresh(ttl time.Duration, payload map[string]interface{}) (string, error) {
	ret := _m.Called(ttl, payload)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokenRefresh")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Duration, map[string]interface{}) (string, error)); ok {
		return rf(ttl, payload)
	}
	if rf, ok := ret.Get(0).(func(time.Duration, map[string]interface{}) string); ok {
		r0 = rf(ttl, payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(time.Duration, map[string]interface{}) error); ok {
		r1 = rf(ttl, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTAuthorization provides a mock function with given fields: request
func (_m *TokenGenerator) JWTAuthorization(request *fasthttp.Request) (*helpers.PayloadJWT, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for JWTAuthorization")
	}

	var r0 *helpers.PayloadJWT
	var r1 error
	if rf, ok := ret.Get(0).(func(*fasthttp.Request) (*helpers.PayloadJWT, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*fasthttp.Request) *helpers.PayloadJWT); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helpers.PayloadJWT)
		}
	}

	if rf, ok := ret.Get(1).(func(*fasthttp.Request) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTRefreshAuthorization provides a mock function with given fields: authToken
func (_m *TokenGenerator) JWTRefreshAuthorization(authToken string) (*helpers.PayloadJWT, error) {
	ret := _m.Called(authToken)

	if len(ret) == 0 {
		panic("no return value specified for JWTRefreshAuthorization")
	}

	var r0 *helpers.PayloadJWT
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*helpers.PayloadJWT, error)); ok {
		return rf(authToken)
	}
	if rf, ok := ret.Get(0).(func(string) *helpers.PayloadJWT); ok {
		r0 = rf(authToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helpers.PayloadJWT)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(authToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenGenerator creates a new instance of TokenGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenGenerator {
	mock := &TokenGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
