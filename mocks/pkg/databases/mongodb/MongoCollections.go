// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MongoCollections is an autogenerated mock type for the MongoCollections type
type MongoCollections struct {
	mock.Mock
}

// InitConnection provides a mock function with given fields: masterDBUrl, slaveDBUrl
func (_m *MongoCollections) InitConnection(masterDBUrl string, slaveDBUrl string) (*mongo.Client, *mongo.Client) {
	ret := _m.Called(masterDBUrl, slaveDBUrl)

	if len(ret) == 0 {
		panic("no return value specified for InitConnection")
	}

	var r0 *mongo.Client
	var r1 *mongo.Client
	if rf, ok := ret.Get(0).(func(string, string) (*mongo.Client, *mongo.Client)); ok {
		return rf(masterDBUrl, slaveDBUrl)
	}
	if rf, ok := ret.Get(0).(func(string, string) *mongo.Client); ok {
		r0 = rf(masterDBUrl, slaveDBUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) *mongo.Client); ok {
		r1 = rf(masterDBUrl, slaveDBUrl)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mongo.Client)
		}
	}

	return r0, r1
}

// NewClient provides a mock function with given fields: mongoUri
func (_m *MongoCollections) NewClient(mongoUri string) (*mongo.Client, error) {
	ret := _m.Called(mongoUri)

	if len(ret) == 0 {
		panic("no return value specified for NewClient")
	}

	var r0 *mongo.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*mongo.Client, error)); ok {
		return rf(mongoUri)
	}
	if rf, ok := ret.Get(0).(func(string) *mongo.Client); ok {
		r0 = rf(mongoUri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mongoUri)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientSlave provides a mock function with given fields: mongoUri
func (_m *MongoCollections) NewClientSlave(mongoUri string) (*mongo.Client, error) {
	ret := _m.Called(mongoUri)

	if len(ret) == 0 {
		panic("no return value specified for NewClientSlave")
	}

	var r0 *mongo.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*mongo.Client, error)); ok {
		return rf(mongoUri)
	}
	if rf, ok := ret.Get(0).(func(string) *mongo.Client); ok {
		r0 = rf(mongoUri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mongoUri)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMongoCollections creates a new instance of MongoCollections. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMongoCollections(t interface {
	mock.TestingT
	Cleanup(func())
}) *MongoCollections {
	mock := &MongoCollections{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
