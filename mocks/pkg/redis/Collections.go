// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"

	v8 "github.com/go-redis/redis/v8"
)

// Collections is an autogenerated mock type for the Collections type
type Collections struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Collections) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn provides a mock function with given fields: ctx
func (_m *Collections) Conn(ctx context.Context) *v8.Conn {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 *v8.Conn
	if rf, ok := ret.Get(0).(func(context.Context) *v8.Conn); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.Conn)
		}
	}

	return r0
}

// Del provides a mock function with given fields: ctx, keys
func (_m *Collections) Del(ctx context.Context, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// EvalSha provides a mock function with given fields: ctx, sha1, keys, args
func (_m *Collections) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) *v8.Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, sha1, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvalSha")
	}

	var r0 *v8.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *v8.Cmd); ok {
		r0 = rf(ctx, sha1, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.Cmd)
		}
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key
func (_m *Collections) Get(ctx context.Context, key string) *v8.StringCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// Set provides a mock function with given fields: ctx, key, value, expiration
func (_m *Collections) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *v8.StatusCmd {
	ret := _m.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *v8.StatusCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// SetNX provides a mock function with given fields: ctx, key, value, expiration
func (_m *Collections) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *v8.BoolCmd {
	ret := _m.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for SetNX")
	}

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// NewCollections creates a new instance of Collections. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollections(t interface {
	mock.TestingT
	Cleanup(func())
}) *Collections {
	mock := &Collections{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
